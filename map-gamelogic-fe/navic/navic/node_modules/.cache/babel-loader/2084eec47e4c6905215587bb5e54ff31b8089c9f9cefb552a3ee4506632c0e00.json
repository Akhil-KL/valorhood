{"ast":null,"code":"var _window, _window$location, _window2, _window2$location;\n// src/socket.js\nimport { io } from \"socket.io-client\";\n\n// Detect environment\nconst isDev = process.env.NODE_ENV === \"development\";\nconst hostname = ((_window = window) === null || _window === void 0 ? void 0 : (_window$location = _window.location) === null || _window$location === void 0 ? void 0 : _window$location.hostname) || \"localhost\";\nconst protocol = ((_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$location = _window2.location) === null || _window2$location === void 0 ? void 0 : _window2$location.protocol) || \"http:\";\n\n// Dynamic socket URL construction\nlet SERVER_URL;\nif (isDev) {\n  // ‚úÖ DEVELOPMENT: replace this with your actual local IP when testing on devices\n  SERVER_URL = \"http://172.24.3.238:3000\"; // üëà Replace with your local server IP if needed\n} else {\n  // ‚úÖ PRODUCTION: use current hostname and protocol\n  SERVER_URL = `${protocol}//${hostname}:3000`;\n}\nconsole.log(\"üîå Connecting to socket server at:\", SERVER_URL);\n\n// Create socket connection\nconst socket = io(SERVER_URL, {\n  transports: [\"websocket\", \"polling\"],\n  reconnectionAttempts: 5,\n  reconnectionDelay: 1000,\n  timeout: 20000\n});\n\n// Debug error listener\nsocket.on(\"connect_error\", error => {\n  console.error(\"‚ùå Socket connection error:\", error.message || error);\n});\nexport default socket;","map":{"version":3,"names":["io","isDev","process","env","NODE_ENV","hostname","_window","window","_window$location","location","protocol","_window2","_window2$location","SERVER_URL","console","log","socket","transports","reconnectionAttempts","reconnectionDelay","timeout","on","error","message"],"sources":["E:/navic/src/socket.js"],"sourcesContent":["// src/socket.js\r\nimport { io } from \"socket.io-client\";\r\n\r\n// Detect environment\r\nconst isDev = process.env.NODE_ENV === \"development\";\r\nconst hostname = window?.location?.hostname || \"localhost\";\r\nconst protocol = window?.location?.protocol || \"http:\";\r\n\r\n// Dynamic socket URL construction\r\nlet SERVER_URL;\r\n\r\nif (isDev) {\r\n  // ‚úÖ DEVELOPMENT: replace this with your actual local IP when testing on devices\r\n  SERVER_URL = \"http://172.24.3.238:3000\"; // üëà Replace with your local server IP if needed\r\n} else {\r\n  // ‚úÖ PRODUCTION: use current hostname and protocol\r\n  SERVER_URL = `${protocol}//${hostname}:3000`;\r\n}\r\n\r\nconsole.log(\"üîå Connecting to socket server at:\", SERVER_URL);\r\n\r\n// Create socket connection\r\nconst socket = io(SERVER_URL, {\r\n  transports: [\"websocket\", \"polling\"],\r\n  reconnectionAttempts: 5,\r\n  reconnectionDelay: 1000,\r\n  timeout: 20000,\r\n});\r\n\r\n// Debug error listener\r\nsocket.on(\"connect_error\", (error) => {\r\n  console.error(\"‚ùå Socket connection error:\", error.message || error);\r\n});\r\n\r\nexport default socket;\r\n"],"mappings":";AAAA;AACA,SAASA,EAAE,QAAQ,kBAAkB;;AAErC;AACA,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;AACpD,MAAMC,QAAQ,GAAG,EAAAC,OAAA,GAAAC,MAAM,cAAAD,OAAA,wBAAAE,gBAAA,GAANF,OAAA,CAAQG,QAAQ,cAAAD,gBAAA,uBAAhBA,gBAAA,CAAkBH,QAAQ,KAAI,WAAW;AAC1D,MAAMK,QAAQ,GAAG,EAAAC,QAAA,GAAAJ,MAAM,cAAAI,QAAA,wBAAAC,iBAAA,GAAND,QAAA,CAAQF,QAAQ,cAAAG,iBAAA,uBAAhBA,iBAAA,CAAkBF,QAAQ,KAAI,OAAO;;AAEtD;AACA,IAAIG,UAAU;AAEd,IAAIZ,KAAK,EAAE;EACT;EACAY,UAAU,GAAG,0BAA0B,CAAC,CAAC;AAC3C,CAAC,MAAM;EACL;EACAA,UAAU,GAAG,GAAGH,QAAQ,KAAKL,QAAQ,OAAO;AAC9C;AAEAS,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,UAAU,CAAC;;AAE7D;AACA,MAAMG,MAAM,GAAGhB,EAAE,CAACa,UAAU,EAAE;EAC5BI,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;EACpCC,oBAAoB,EAAE,CAAC;EACvBC,iBAAiB,EAAE,IAAI;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAJ,MAAM,CAACK,EAAE,CAAC,eAAe,EAAGC,KAAK,IAAK;EACpCR,OAAO,CAACQ,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACC,OAAO,IAAID,KAAK,CAAC;AACrE,CAAC,CAAC;AAEF,eAAeN,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}