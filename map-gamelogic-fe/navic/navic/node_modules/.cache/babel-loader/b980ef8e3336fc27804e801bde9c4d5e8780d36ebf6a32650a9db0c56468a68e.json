{"ast":null,"code":"const express = require('express');\nconst http = require('http');\nconst {\n  Server\n} = require('socket.io');\nconst cors = require('cors');\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server, {\n  cors: {\n    origin: \"*\",\n    // In production, specify your frontend URL\n    methods: [\"GET\", \"POST\"]\n  }\n});\nlet players = {};\nio.on(\"connection\", socket => {\n  console.log(\"User connected:\", socket.id);\n\n  // Send current players to newly connected user\n  socket.emit(\"playersUpdate\", players);\n  socket.on(\"updatePosition\", data => {\n    players[socket.id] = data;\n    io.emit(\"playersUpdate\", players); // Broadcast all players\n  });\n  socket.on(\"disconnect\", () => {\n    console.log(\"User disconnected:\", socket.id);\n    delete players[socket.id];\n    io.emit(\"playersUpdate\", players);\n  });\n});\n\n// Listen on all network interfaces (0.0.0.0) instead of just localhost\nserver.listen(3000, '0.0.0.0', () => {\n  console.log(\"✅ Server running on http://0.0.0.0:3000\");\n});","map":{"version":3,"names":["express","require","http","Server","cors","app","server","createServer","io","origin","methods","players","on","socket","console","log","id","emit","data","listen"],"sources":["E:/navic/src/components/PlayerMap.jsx"],"sourcesContent":["const express = require('express');\r\nconst http = require('http');\r\nconst { Server } = require('socket.io');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = new Server(server, {\r\n  cors: {\r\n    origin: \"*\", // In production, specify your frontend URL\r\n    methods: [\"GET\", \"POST\"]\r\n  }\r\n});\r\n\r\nlet players = {};\r\n\r\nio.on(\"connection\", (socket) => {\r\n  console.log(\"User connected:\", socket.id);\r\n\r\n  // Send current players to newly connected user\r\n  socket.emit(\"playersUpdate\", players);\r\n\r\n  socket.on(\"updatePosition\", (data) => {\r\n    players[socket.id] = data;\r\n    io.emit(\"playersUpdate\", players); // Broadcast all players\r\n  });\r\n\r\n  socket.on(\"disconnect\", () => {\r\n    console.log(\"User disconnected:\", socket.id);\r\n    delete players[socket.id];\r\n    io.emit(\"playersUpdate\", players);\r\n  });\r\n});\r\n\r\n// Listen on all network interfaces (0.0.0.0) instead of just localhost\r\nserver.listen(3000, '0.0.0.0', () => {\r\n  console.log(\"✅ Server running on http://0.0.0.0:3000\");\r\n});"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEE;AAAO,CAAC,GAAGF,OAAO,CAAC,WAAW,CAAC;AACvC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,MAAMM,MAAM,GAAGJ,IAAI,CAACK,YAAY,CAACF,GAAG,CAAC;AACrC,MAAMG,EAAE,GAAG,IAAIL,MAAM,CAACG,MAAM,EAAE;EAC5BF,IAAI,EAAE;IACJK,MAAM,EAAE,GAAG;IAAE;IACbC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM;EACzB;AACF,CAAC,CAAC;AAEF,IAAIC,OAAO,GAAG,CAAC,CAAC;AAEhBH,EAAE,CAACI,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;EAC9BC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,MAAM,CAACG,EAAE,CAAC;;EAEzC;EACAH,MAAM,CAACI,IAAI,CAAC,eAAe,EAAEN,OAAO,CAAC;EAErCE,MAAM,CAACD,EAAE,CAAC,gBAAgB,EAAGM,IAAI,IAAK;IACpCP,OAAO,CAACE,MAAM,CAACG,EAAE,CAAC,GAAGE,IAAI;IACzBV,EAAE,CAACS,IAAI,CAAC,eAAe,EAAEN,OAAO,CAAC,CAAC,CAAC;EACrC,CAAC,CAAC;EAEFE,MAAM,CAACD,EAAE,CAAC,YAAY,EAAE,MAAM;IAC5BE,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,MAAM,CAACG,EAAE,CAAC;IAC5C,OAAOL,OAAO,CAACE,MAAM,CAACG,EAAE,CAAC;IACzBR,EAAE,CAACS,IAAI,CAAC,eAAe,EAAEN,OAAO,CAAC;EACnC,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAL,MAAM,CAACa,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM;EACnCL,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;AACxD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}